name: Release

on:
  push:
    tags:
      - 'v*.*.*'   # запускается при пуше тега вида v1.2.3
  workflow_dispatch:

permissions:
  contents: write   # нужно для публикации релиза

jobs:
  build-release:
    name: Build & Package (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true    # и теги! (нужно для project(version-from-git))

      - uses: seanmiddleditch/gha-setup-ninja@v5

      # MSVC env (только на Windows)
      - name: MSVC Dev Cmd
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure (Release)
        run: cmake -S . -B build -G Ninja \
                   -DCMAKE_BUILD_TYPE=Release \
                   -DENABLE_IPO=ON

      - name: Build
        run: cmake --build build -j

      - name: Install to staging
        run: cmake --install build --prefix "$PWD/stage"
        shell: bash

      # Упаковка CPack в контролируемую папку build/pack
      - name: Package (CPack)
        working-directory: build
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cpack -G ZIP -B "$PWD/pack"
          else
            cpack -G ZIP -B "$PWD/pack"
            cpack -G TGZ -B "$PWD/pack"
          fi

      - name: List packages
        run: ls -lh build/pack || true
        shell: bash

      - name: Upload packages as workflow artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ runner.os }}
          path: |
            build/pack/*.zip
            build/pack/*.tar.gz
          if-no-files-found: error

  package-linux:
    name: "Package (Linux: DEB & RPM)"
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: seanmiddleditch/gha-setup-ninja@v5

      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm dpkg-dev fakeroot cpack || true
          # cpack обычно идёт с cmake, оставим на случай старых образов

      - name: Configure (Release)
        run: cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DENABLE_IPO=ON

      - name: Build
        run: cmake --build build -j

      - name: Install to staging
        run: cmake --install build --prefix "$PWD/stage"

      - name: Package (DEB & RPM)
        working-directory: build
        run: |
          cpack -G DEB -B "$PWD/pack"
          cpack -G RPM -B "$PWD/pack"

      - name: List packages
        run: ls -lh build/pack || true

      - name: Upload Linux packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-linux
          path: |
            build/pack/*.deb
            build/pack/*.rpm
          if-no-files-found: error

  package-macos:
    name: "Package (macOS: DMG)"
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: seanmiddleditch/gha-setup-ninja@v5

      - name: Configure (Release)
        run: cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DENABLE_IPO=ON

      - name: Build
        run: cmake --build build -j

      - name: Install to staging
        run: cmake --install build --prefix "$PWD/stage"

      - name: Package (DMG)
        working-directory: build
        run: cpack -G DragNDrop -B "$PWD/pack"

      - name: List packages
        run: ls -lh build/pack || true

      - name: Upload macOS packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-macos
          path: build/pack/*.dmg
          if-no-files-found: error

  package-windows:
    name: "Package (Windows: MSI via WiX)"
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: ilammy/msvc-dev-cmd@v1
      - uses: seanmiddleditch/gha-setup-ninja@v5

      - name: Install WiX Toolset
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: install wixtoolset --no-progress -y

      - name: Configure (Release)
        run: cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DENABLE_IPO=ON

      - name: Build
        run: cmake --build build -j

      - name: Install to staging
        run: cmake --install build --prefix "${{ github.workspace }}\\stage"

      - name: Generate WiX LICENSE.rtf from LICENSE (pandoc)
        shell: pwsh
        run: |
          choco install pandoc --no-progress -y
          New-Item -ItemType Directory -Force -Path cmake\wix | Out-Null
          pandoc -s -o cmake\wix\LICENSE.rtf LICENSE

      - name: Package (MSI)
        working-directory: build
        run: cpack -G WIX -B "$PWD/pack"

      - name: Show WiX log on failure
        if: failure()
        shell: pwsh
        run: |
          $log = "build/pack/_CPack_Packages/win64/WIX/wix.log"
          if (Test-Path $log) { Get-Content $log -Raw | Write-Host } else { Write-Host "wix.log not found" }

      - name: Upload WiX logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: wix-log
          path: build/pack/_CPack_Packages/win64/WIX/wix.log
          if-no-files-found: ignore

      - name: List packages
        shell: bash
        run: ls -lh build/pack || true

      - name: Upload Windows packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-windows
          path: ${{ steps.pack.outputs.path }}
          if-no-files-found: error

  publish:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List downloaded artifacts
        run: |
          echo "Artifacts:"
          find dist -type f -maxdepth 3 -print

      - name: Create GitHub Release and upload assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/*.zip
            dist/**/*.tar.gz
            dist/**/*.deb
            dist/**/*.rpm
            dist/**/*.dmg
            dist/**/*.msi
          generate_release_notes: true
